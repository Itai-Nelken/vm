=== VM spec ===

Instructions
============

<reg>   - A register.
<const> - A constant value.
<addr>  - A address.

[<xxx>] - An optional argument.

0x0:  PUSH <reg/const>       - push the value in a register or a <const> to the stack.
0x1:  POP [<reg>]            - pop a value from the stack and optionally save it in a register. if no register is provided, the value IS NOT saved.
0x2:  PEEK [<reg>]           - duplicate the value at the top of the stack or put in a register if provided.
0x3:  MOV <reg>, <reg/const> - move the value in a register or a <const> into a register. the first argument is the destination register and the second argument is the source (value/register).
0x4:  LD                     - load a value in the binary at a provided address and push it to the stack. requires the address to be the stack head, it gets popped.
0x5:  ST                     - store a value at an adress. both have to be in the stack at the following order: address, value. both are popped.
0x6:  ADD                    - pop 2 values off the stack, add them, and push the result.
0x7:  SUB                    - pop 2 values off the stack, subtract the LAST PUSHED from the FIRST PUSHED, and push the result.
0x8:  MUL                    - pop 2 values off the stack, multiply them, and push the result.
0x9:  DIV                    - pop 2 values off the stack, divide the FIRST PUSHED by the LAST PUSHED, and push the result.
0xA:  AND                    - pop 2 values off the stack, bitwise AND them, and push the result.
0xB:  OR                     - pop 2 values off the stack, bitwise OR them, and push the result.
0xC:  XOR                    - pop 2 values off the stack, bitwise XOR them, and push the result.
0xD:  SHL                    - pop 2 values off the stack, bitwise shift left them, and push the result.
0xE:  SHR                    - pop 2 values off the stack, bitwise shift right them, and push the result.
0xF:  JMP <addr>             - jump to an adress in the text binary section (the code section).
0x10: JEQ <addr>             - Pop the 2 top values at the top of the stack, if they are equal jump to <addr>.
0x11: JNE <addr>             - Pop the 2 top values at the top of the stack, if they are NOT equal, jump to <addr>.
0x12: JGT <addr>             - Pop the 2 top values at the top of the stack, if the FIRST value pushed is larger than the second jump to <addr>.
0x13: JLE <addr>             - Pop the 2 top values at the top of the stack, if the FIRST value pushed is smaller than the second jump to <addr>.
0x14: REQ                    - Request a service. requires the service register to contain a valid service ID.
0x15: NOP                    - Do nothing.
0x16: HLT                    - Halt the program

Memory
======
There is the stack (256 bytes) and the memory (1K).
the data section in the binary is loaded into the memory.

Registers
=========
A - F: general purpose registers. used as argument registers for services.
RQ: request register. used to specify the service ID before calling it with 'req'.
PC: program counter (instruction pointer), contains adress of next instruction to execute.
SP: stack pointer, contains the address of the top of the stack.
T1, T2: timer 1 and 2, count down once every second if a value is put in them. stop when it's zero.
FLAGS: flags that can be set by the math and bitwise operators:
    - flags (first to last):
        * N - set if the last operation resulted in a negative number pushed to the stack.
        * Z - set if the last operation resulted in zero pushed to the stack.

VM services available using the 'req' instruction
=================================================
 * (0x0) write(data, size, fd) - write 'size' from 'data' to a file.
    - by default, you can use 1 and 2 for stdout and stderr respectively.
    - returns the amount of bytes written or -1 on error.
 * (0x1) read(dest, size, fd) - read 'size' data from a file into 'dest'.
    - by default, you can use 1 for stdin.
    - returns the amount of read bytes or -1 on failure.
 * (0x2) open(path, mode) - open a file.
    - mode can be either 0b01 (read only), 0b10 (write only), and 0b11 (read-write)
    - returns file descriptor ID for opened file or -1 on failure.
 * (0x3) close(fd) - close a file descriptor.
    - trying to close stdin, stdout, or stderr causes a runtime error.
 * (0x4) exit(status) - halt the program and exit with exit code 'status'
    - causes the VM to stop, clean up, and exit with value 'status'.

To call a service, put it's number in the RQ register. arguments are pushed to the stack, the first argument being pushed first.
The arguments are popped from the stack and the return value (if exists) is put in the ret bit in the flags register.

Runtime errors
==============
 * (0x0) Division by zero.
 * (0x1) Stack overflow.
 * (0x2) Stack underflow.
 * (0x3) Invalid address.
 * (0x4) Insufficient arguments for a request.
 * (0x5) Invalid request.

Format for binaries
===================

SYMBOLS
-------
START - at the start of the binary.
CODE  - the code section.
DATA  - the data section.
END   - at the end of the binary.

DIAGRAM
-------
START
__________
|        |
|  code  |
|________|
|        |
|  data  |
|________|
END

The data section is loaded into the memory.

Assembly syntax
===============

syntax:
---------
<instruction> <arg1>, <arg2>
; this is a comment
; it goes until end of line
<label>:
    ; do stuff
---------

example:
--------------
push 1
push 2
add
pop RA

mov RB, 10
push RB
push 10
jeq label
jmp end
label:
    add
end:
    mov RQ, 0x5 ; exit
    push 0      ; with status 0
    req
--------------
labels are an abstraction the assembler provides for addresses.
they are simply a human readable name for the adresses.

LITERALS
--------
decimal numbers, for example: 42
hexadecimal numbers, for example: 0x5A
binary numbers, for example: 0b11
charaters are translated to their ascii equivalent, but you can define them in a human readable form. for example: 'A'
strings are "arrays" of characters. they can be declared like this: "string".

MACROS
------
A macro is a bunch of instructions that can be grouped toghether under a name that accepts arguments.
macros are expanded at assembly time and references to the arguments are replaced with the provided arguments.
macros are NOT allowed to have the same names as instructions and registers.

syntax:
---------
@macro <name> <argument count>
    ; instructions go here.
    ; make sure to restore everything to the way it was at the end,
    ; and don't make macros to long. use subroutines for longer stuff.
    ; to reference an argument, use $<argument number>
    ; for example $1 means the first argument and $2 means the 2nd one, and so on.
@endmacro
---------

example:
-------
; declare the macro
@macro addition 2
    push $1
    push $2
    add
@endmacro

; use it
addition 1, 2 ; when done, 3 will be on the stack

; when expaneded, it will be replaced with:
;
; push 1
; push 2
; add
;
-------

NAMED CONSTANTS
---------------
This is an abstraction the assembler provides for constants.
at assembly time, the name of the named constant will be replaced with it's value.
named constants are NOT allowed to have the name as instructions and registers.

syntax:
----------
@define NAME <value>
----------

example:
---------
; declare the named constant
@define VERSION 1

; use it
push VERSION
push 1
jeq ok
jmp end
ok:
    ; exit with status 0
    mov RQ, 0x5
    push 0
    req
end:
    ; exit with status 1
    mov RQ, 0x5
    push 1
    req
---------

CONSTANT EXPRESSIONS
--------------------
A way to show how you got a number by putting the calculation inside '@()'.
The assembler will calculate the result at assembly time, so runtime performance isn't affected.

available operators:
--------------------
+, -, *, / (addition, subtraction, multiplication, division)
&, |, <<, >>, ^, ~ (bitwise and, or, left shift, right shift, xor, flip bits)

syntax:
---------
@(<expr>)
---------

example:
---------
push @(1 + 2) ; same as 'push 3'
---------

Sections
========
Using the 'section' keyword, you can specify what section the following data goes in: code, or data.
The default section is code.

example:
---------
section text
; everything here goes in text section.
section data
; everything here goes in the data section.
---------

Includes
========
includes allow you to define macros and named constants in a different file and then include it from your program file.

syntax:
---------
@include path/to/file.inc
---------

examples
========

count to 10:
---------
@macro inc 1
    push $1
    push 1
    add
    pop $1
@endmacro

@macro print 0
    ; backup the value on the stack to rF
    pop rF

    mov RQ, 0x0 ; write
    ; data argument should already be on the stack
    push 4 ; sizeof(int)
    push 1 ; stdout
    req

    ; restore the value
    push rF
@endmacro

mov rA, 0
loop:
    inc rA
    push rA
    print
    push 10
    jne loop
---------

print a string:
---------------
push message
push 13 ; length of "Hello, World!"
push 1 ; stdout
mov rq, 0 ; write
req

push 0
mov rq, 4 ; exit
req

section data
message: "Hello, World!"
---------------
